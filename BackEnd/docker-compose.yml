version: '3'

services:
  account-service:
    container_name: account-service
    build:
      context: ./Account
      dockerfile: Dockerfile
    expose:
        - 7000
    ports:
        - "7000:7000"
    volumes:
      - ./Account:/var/www/html
      - /var/www/html/vendor/
    networks:
      - api-network
    restart: always
    depends_on:
      mysql:
        condition: service_healthy

  contactez-nous-service:
    build:
      context: ./Contactez-nous
      dockerfile: Dockerfile
    expose:
        - 7001
    ports:
        - "7001:7001"
    volumes:
      - ./Contactez-nous:/contactez-nous-service
    restart: always
    networks:
      - api-network
    depends_on:
      mysql:
        condition: service_healthy

  email-service:
    build:
      context: ./Email
      dockerfile: Dockerfile
    expose:
        - 7002
    ports:
        - "7002:7002"
    volumes:
      - ./Email:/email-service
    restart: always
    networks:
      - api-network
    depends_on:
      mysql:
        condition: service_healthy

  reclamation-service:
    build:
      context: ./Reclamation
      dockerfile: Dockerfile
    expose:
        - 7003
    ports:
        - "7003:7003"
    volumes:
      - ./Reclamation:/reclamation-service
    restart: always
    networks:
      - api-network
    depends_on:
      mysql:
        condition: service_healthy

  cdn-service:
    build:
      context: ./CDN
      dockerfile: Dockerfile
    expose:
        - 7005
    ports:
        - "7005:7005"
    volumes:
      - ./CDN:/cdn-service
    restart: always
    networks:
      - api-network
    depends_on:
      mysql:
        condition: service_healthy

  reviews-service:
    build:
      context: ./reviews
      dockerfile: Dockerfile
    expose:
        - 7004
    ports:
        - "7004:7004"
    volumes:
      - ./reviews:/reviews-service
    restart: always
    networks:
      - api-network
    depends_on:
      mysql:
        condition: service_healthy

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    environment:
      - PORT=3300
      - ACCOUNT_SERVICE=${ACCOUNT_URL}
      - CONTACTEZ_NOUS_SERVICE=${CONTACTEZNOUS_URL}
      - EMAIL_SERVICE=${EMAIL_URL}
      - RECLAMATION_SERVICE=${RECLAMATION_URL}
      - REVIEWS_SERVICE=${REVIEWS_URL}
      - CDN_SERVICE=${CDN_URL}
    deploy:
      replicas: 3
      restart_policy:
        max_attempts: 3
        condition: on-failure
      update_config:
        parallelism: 3
        delay: 10s
    volumes:
      - ./api-gateway:/api-gateway
    networks:
      - api-network

  load-balancer:
    image: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./load-balancer/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certbot/www:/var/www/certbot/:ro
      - ./certbot/conf/:/etc/nginx/ssl/:ro
    depends_on:
      - api-gateway
    networks:
      - api-network
    restart: always

  certbot:     
    image: certbot/certbot:latest
    volumes:
      - ./certbot/www/:/var/www/certbot/:rw
      - ./certbot/conf/:/etc/letsencrypt/:rw

  #database setup
  mysql:
    container_name: mysql
    image: mysql:latest
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: hirafy12345678
      MYSQL_USER: hirafy
      MYSQL_PASSWORD: hirafy12345678
    volumes:
      - ./database:/docker-entrypoint-initdb.d
    ports:
      - "3307:3306"
    restart: always
    networks:
      - api-network
    healthcheck:
      test: "exit 0"

  phpmyadmin:
    container_name: phpmyadmin
    image: phpmyadmin:latest
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_ARBITRARY: 1
    ports:
      - "8082:80"
      - "8083:80"
    networks:
      - api-network
    restart: always
    depends_on:
      mysql:
        condition: service_healthy
networks:
  api-network:
volumes:
  hirafy_data:
    driver: local